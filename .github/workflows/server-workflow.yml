name: "[CI] Server"
on:
  pull_request:
    paths:
      - ".github/workflows/server-workflow.yml"
      - "bulletin_board/server/**"
  push:
    branches:
      - develop
      - main

env:
  CI: "true"
  SIMPLECOV: "true"
  ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
jobs:
  build_python_wrapper:
    name: Build electionguard
    runs-on: ubuntu-latest
    container:
      image: codegram/ruby-node-python-electionguard:0.0.1
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.2
        if: "github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v2.0.0
        with:
          fetch-depth: 1
      - name: Copy local electionguard
        run: cp -r /code/voting_schemes/electionguard/electionguard-python voting_schemes/electionguard
      - name: Cache python wrapper
        uses: actions/cache@v2
        env:
          cache-name: cache-electionguard-python
        with:
          path: /cache/python
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('voting_schemes/electionguard/python-wrapper') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Build electionguard python wrapper
        run: |
          make build_electionguard_python_wrapper
          mkdir -p /cache/python
          cp -r voting_schemes/electionguard/python-wrapper /cache/python
          cp -r voting_schemes/electionguard/electionguard-python /cache/python
  build_python_to_js:
    name: Build pyodide
    needs: build_python_wrapper
    runs-on: ubuntu-latest
    container:
      image: codegram/electionguard-pyodide-base-packages:0.0.1
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.2
        if: "github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v2.0.0
        with:
          fetch-depth: 1
      - name: Cache python to js
        uses: actions/cache@v2
        env:
          cache-name: cache-electionguard-pyodide-assets
        with:
          path: /cache/python-to-js
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('voting_schemes/electionguard/python-to-js') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Cache python wrapper
        uses: actions/cache@v2
        env:
          cache-name: cache-electionguard-python
        with:
          path: /cache/python
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('voting_schemes/electionguard/python-wrapper') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Build pyodide
        env:
          PYODIDE_PACKAGES: "electionguard,bulletin_board-electionguard"
        run: |
          cp -r voting_schemes/electionguard/python-to-js/packages/* /src/pyodide/packages
          cp -r /cache/python/electionguard-python/dist /src/pyodide/packages/electionguard
          cp -r /cache/python/python-wrapper/dist /src/pyodide/packages/bulletin_board-electionguard
          cd /src/pyodide && make
      - name: Override pyodide build
        run: |
          cp -r voting_schemes/electionguard/python-to-js/override/* /src/pyodide/build/
          mkdir -p /cache/python-to-js/electionguard-assets
          cp -r /src/pyodide/build/* /cache/python-to-js/electionguard-assets
  build:
    name: Build
    needs: build_python_to_js
    runs-on: ubuntu-latest
    container:
      image: codegram/ruby-node-python-electionguard:0.0.1
    services:
      postgres:
        image: postgres:11
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_PASSWORD: postgres
    env:
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: postgres
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.2
        if: "github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v2.0.0
        with:
          fetch-depth: 1
      - name: Cache python to js
        uses: actions/cache@v2
        env:
          cache-name: cache-electionguard-pyodide-assets
        with:
          path: /cache/python-to-js
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('voting_schemes/electionguard/python-to-js') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Cache python wrapper
        uses: actions/cache@v2
        env:
          cache-name: cache-electionguard-python
        with:
          path: /cache/python
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('voting_schemes/electionguard/python-wrapper') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Restore previous artifacts
        run: |
          cp -r /cache/python/electionguard-python voting_schemes/electionguard
          cp -r /cache/python/python-wrapper voting_schemes/electionguard
          mkdir -p voting_schemes/electionguard/ruby-adapter/public/assets/electionguard
          cp -r /cache/python-to-js/electionguard-assets/* voting_schemes/electionguard/ruby-adapter/public/assets/electionguard
      - name: Install postgres client
        run: sudo apt-get install libpq-dev
      - name: Install Cypress
        run: npx cypress install
      - name: Configure gems folder
        run: bundle config path vendor/bundle
      - name: Cache Ruby dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-ruby-dependencies
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Gemfile.lock') }}
      - name: Cache Server JS dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-server-js-dependencies
        with:
          path: |
            .cache/Cypress
            bulletin_board/server/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('bulletin_board/server/package-lock.json') }}
      - name: Cache Client JS dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-client-js-dependencies
        with:
          path: bulletin_board/js-client/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('bulletin_board/js-client/package-lock.json') }}
      - name: Cache Dummy JS dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-dummy-js-dependencies
        with:
          path: voting_schemes/dummy/js-adapter/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('voting_schemes/dummy/js-adapter/package-lock.json') }}
      - name: Cache Electionguard JS dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-electionguard-js-dependencies
        with:
          path: voting_schemes/electionguard/js-adapter/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('voting_schemes/electionguard/js-adapter/package-lock.json') }}
      - name: Install dependencies
        run: make install
      - name: Build artifacts
        run: make build
      - name: Install Rubocop
        run: gem install rubocop
      - name: Lint Ruby files
        run: cd bulletin_board/server && bundle exec rubocop -P
      - name: Lint JS files
        run: cd bulletin_board/server && npm run lint
      - name: Format JS files
        run: |
          cd bulletin_board/server
          npm run format
          git diff --exit-code
      - name: Create database
        env:
          RAILS_ENV: test
        run: |
          cd bulletin_board/server
          bundler exec rails db:create
          bundler exec rails db:migrate
      # - name: Check if GraphQL schema has changed
      #   env:
      #     RAILS_ENV: test
      #   run: |
      #     cd bulletin_board/server
      #     bundle exec rails server &
      #     sleep 5
      #     bundle exec rake schema:generate
      #     npm run schema:generate
      #     git diff --exit-code
      # - name: Run Rspec tests
      #   run: cd bulletin_board/server && bundler exec rake
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v1
      #   with:
      #     directory: ./bulletin_board/server/coverage
      - name: Run e2e tests
        uses: cypress-io/github-action@v2
        with:
          start: bundle exec rails s -e test -p 5017 -P tmp/test_server.pid
          working-directory: ./bulletin_board/server
          install: false
      - name: Upload artifacts (screenshots)
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: cypress screenshots
          path: bulletin_board/server/cypress/screenshots/
      - name: Upload artifacts (videos)
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: cypress videos
          path: bulletin_board/server/cypress/videos/
      - name: Upload artifacts (downloads)
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: cypress downloads
          path: bulletin_board/server/cypress/downloads/
      - name: Upload artifacts (logs)
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: server logs
          path: bulletin_board/server/log
